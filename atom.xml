<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Manuel Vergara&#39;s note</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mavd09.github.io/"/>
  <updated>2017-10-11T15:24:37.467Z</updated>
  <id>http://mavd09.github.io/</id>
  
  <author>
    <name>Manuel Vergara</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bresenham&#39;s line algorithm</title>
    <link href="http://mavd09.github.io/2017/10/11/rendering/"/>
    <id>http://mavd09.github.io/2017/10/11/rendering/</id>
    <published>2017-10-11T15:24:37.467Z</published>
    <updated>2017-10-11T15:24:37.467Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><p>Este algoritmo se encarga de determinar los puntos que deben ser usados en un raster n-dimensional con el fin de obtener una aproximacion lo mas cercana a una linea recta entre dos puntos. Su principal caracteristica es realizar calculos con los numeros enteros.</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2NW1oRFo0RUV5ZW8" alt="Bresenham ejemplo" title="Bresenham ejemplo"><br></center><h1 id="Algo-de-historia…"><a href="#Algo-de-historia…" class="headerlink" title="Algo de historia…"></a>Algo de historia…</h1><p>Jack Elton Bresenham desarrollo este algoritmo en 1962 para IBM, con el fin de poder dibujar sobre un ploter de Calcomp (es de los primeros dispositivos con salida grafica que estuvo a la venta). El uso libre de copias de los programas entre empleados de la misma empresa permitio que algunos compa;eros de Bresenham le pidieran permiso para presentarlo en nombre de el en una convencion de la ACM que se realizaria en Denver (CO) en 1963, a lo cual acepto y para 1965 salio impreso el paper por primera vez.<br>El algoritmo de Bresenham fue extendido con el fin de no solo producir lineas, si no tambien circulos.</p><h1 id="Algoritmo"><a href="#Algoritmo" class="headerlink" title="Algoritmo"></a>Algoritmo</h1><p>Podemos trazar una linea recta con un lapiz en un pedazo de papel sin problemas, sin preocupaciones de como la podemos representar, pero si estamos en un sistema que consiste de pixeles en donde la minima unidad que podemos pintar es un pixel, representar nuestra linea se vuelve algo complejo pues ya no va a ser una linea perfecta y adicionalmente tenemos que tomar la decision de que pixeles debemos pintar con el fin de que se parezca lo mejor posible a la linea imaginaria que deseamos hacer.</p><p>Ahora bien, de que manera determinamos que pixeles pintar?</p><p>Consideremos el proceso de conversion para lineas con pendiente positiva <code>0 &lt; m &lt; 1</code>, comenzando desde el punto mas a la izquierda de la linea en cuestion, y mediante un proceso secuencial vamos a ir mirando que pixel pintar en la siguiente columna (esto se determina mirando que pixel esta mas cerca a la linea trazada). Para lo ultimo, es necesario que que realicemos un muestreo en <code>x</code> y en <code>y</code> (pueden ser los valores medios de cada pixel) con el fin de obtener otra cuadricula y asi facilitar la determinacion de que pixel esta mas cerca para un punto en especifico.</p><p>Comencemos asumiendo que el pixel que acabamos de pintar esta en la coordenada </p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2RmZFQUNiY3Z2LU0" alt=""><br></center><br>y ahora tenemos que decidir que pixel pintar, entre<br><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2T1FwSmRUN0c0VkU" alt=""><br></center><p>Es decir, tendriamos algo como se muestra en la siguiente imagen</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2aGp0bTVMajJzNUE" alt="Bresenham trazado" title="Ejemplo de division"><br></center><p>Ahora, calculemos la coordenada de <code>y</code> de la linea en la columna de los pixeles <code>x_k + 1</code></p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2aGhsSkZrMnVWUjg" alt=""><br></center><p>De ahi obtenemos <code>d_1</code> y <code>d_2</code> realizando aritmetica sobre la ecuacion de la linea presentada anteriormente</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2Z3o1ZXNEV3RjN0k" alt=""><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2R1pzTFZnLVRncjA" alt=""><br></center><p>La diferencia entre las dos separaciones entonces es</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2bUEyVDN4czdfS0E" alt=""><br></center><p>Para definir un parametro de decision <code>p_k</code> para la iteracion k en el algoritmo, se obtiene si se reorganiza la ecuacion de tal manera que solo se tengan que realizar calculos enteros. Esto se logra expresando la pendiente <code>m</code>, segun su definicion, como la division entre la diferencia de <code>y</code> y la diferencia de <code>x</code>, asi</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2RDZZZFVLRkFHZDA" alt=""><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2NE9NWVRHZk5CRmM" alt=""><br></center><p>Con esto, el signo de <code>p_k</code> es igual que el de la diferencia entre <code>d_1-d_2</code>, por lo tanto podemos definir lo siguiente</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2djZQYndhU1B5S0k" alt=""><br></center><p>Por ultimo, si intentamos buscar el parametro para pasos siguientes podemos expresar <code>p_k+1</code> como sigue</p><center><br><img src="https://drive.google.com/uc?id=0B6wfKMQSUFS2dGVUUjQySnJDZEk" alt=""><br></center><p>Entonces de esta manera ponemos saber que pixeles vamos pintando con el uso de operaciones que no requieren divisiones, y en donde se pueden definir facilmente los parametros.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Ensure that x0 &lt;= x1 holds.</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lineBresenham</span><span class="params">( <span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1 )</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> dx = <span class="built_in">abs</span>(x1-x0);</div><div class="line">  <span class="keyword">int</span> dy = <span class="built_in">abs</span>(y1-y0);</div><div class="line">  <span class="keyword">int</span> p = <span class="number">2</span>*dy - dx;</div><div class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> x = x0, y = y0; x &lt;= x1; x++ ) &#123;</div><div class="line">    <span class="comment">// Draw the point (x, y)</span></div><div class="line">    <span class="keyword">if</span>( p &lt; <span class="number">0</span> ) p = p + <span class="number">2</span>*dy;</div><div class="line">    <span class="keyword">else</span>        p = p + <span class="number">2</span>*(dy-dx), y = y + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Bibliografia"><a href="#Bibliografia" class="headerlink" title="Bibliografia"></a>Bibliografia</h1><ul><li><em><a href="https://es.wikipedia.org/wiki/Algoritmo_de_Bresenham" target="_blank" rel="external">https://es.wikipedia.org/wiki/Algoritmo_de_Bresenham</a></em></li><li><em><a href="http://www.cannes.itam.mx/Alfredo/Espaniol/Cursos/Grafica/Linea.pdf" target="_blank" rel="external">http://www.cannes.itam.mx/Alfredo/Espaniol/Cursos/Grafica/Linea.pdf</a></em></li><li><em><a href="http://www.nosolounix.com/2010/05/algoritmo-bresenham-dibujar-linea.html" target="_blank" rel="external">http://www.nosolounix.com/2010/05/algoritmo-bresenham-dibujar-linea.html</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Este algoritmo se encarga de determinar los puntos que deben ser usados en un raster n-dimensional con el fin de obtener una aproximacion lo mas cercana a una linea recta entre dos puntos.&lt;br&gt;
    
    </summary>
    
      <category term="rendering" scheme="http://mavd09.github.io/categories/rendering/"/>
    
      <category term="visual computing" scheme="http://mavd09.github.io/categories/rendering/visual-computing/"/>
    
    
      <category term="rendering" scheme="http://mavd09.github.io/tags/rendering/"/>
    
      <category term="rasterization" scheme="http://mavd09.github.io/tags/rasterization/"/>
    
      <category term="algorithm" scheme="http://mavd09.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
